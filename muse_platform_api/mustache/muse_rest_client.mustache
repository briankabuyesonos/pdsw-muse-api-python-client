from base_muse_rest import BaseRestClient


# This class was automatically generated and should only be edited via muse-client.py.template
class MuseRestClient(BaseRestClient):
    {{#init}}
    def __init__(self, ip, {{#init_apiKey}}apiKey=None, {{/init_apiKey}}uuid=None, apiVersion=str({{apiVersion}})):
        super(MuseRestClient, self).__init__(ip=ip, {{#pass_apiKey}}apiKey=apiKey, {{/pass_apiKey}}uuid=uuid, apiVersion=apiVersion)

    {{/init}}
        {{#namespaces}}
        self.{{var_name}} = {{namespace_name}}Client(self)
        {{/namespaces}}
{{#clients}}


# This class was automatically generated and should only be edited via namespace-client.py.template
class {{namespace_name}}Client(object):
    {{#namespace_description}}
    """
    {{{.}}}{{! Triple braces == do not escape special chars (like ") }}
    """
    {{/namespace_description}}
    def __init__(self, museRestClient):
        self._museRestClient = museRestClient
    {{#commands}}

    # This method was automatically generated and should only be edited via namespace-command.py.template
    def {{command_name}}(self, {{#required_args_map}}{{#isReserved}}_{{/isReserved}}{{name}}=None, {{/required_args_map}}{{#optional_args_map}}{{#isReserved}}_{{/isReserved}}{{name}}=None, {{/optional_args_map}}
                         isSecure=True, check=True, ignoreRequiredParams=False, send=True, reqHeaders=None, **kwargs):
        """
        {{#command_description}}
        {{{.}}}

        {{/command_description}}
        This method was autogenerated from the {{namespace_name}} namespace xml definition
        {{#arg_comments}}
        :param {{arg_name}}: ({{arg_type}}){{{arg_description}}}
        {{/arg_comments}}
        :param isSecure: (Optional) Switches whether call should use ssl port (1443) or the normal port
        :param check: (Optional) If True, the command will assert a 200 response, then parse the body as json
        :param ignoreRequiredParams: (Optional) If True, skip raising exception when required parameters are missing
                                     and remove sending of None body parameters
        :param send: (Optional) Whether to send the url request or return the request object
        :return: depending on if 'check' param is set, either the raw response or the parsed JSON body
        """
        {{#set_apiKey}}
        apiKey = self._museRestClient._apiKey if apiKey is None else apiKey
        {{/set_apiKey}}
        {{#set_hhConfigToken}}
        oauthToken = self._museRestClient.hhConfigToken if oauthToken is None else oauthToken
        {{/set_hhConfigToken}}
        {{#set_hhConfigAdminToken}}
        oauthToken = self._museRestClient.hhConfigAdminToken if oauthToken is None else oauthToken
        {{/set_hhConfigAdminToken}}
        cmd_url = "{}{{target_route}}{{namespace}}{{rest_name}}".format(
                   "/"{{url_params}})
        {{#resource_id}}
        cmd_url += '/' + {{.}} if {{.}} else ''
        {{/resource_id}}

        {{#missing_body}}
        # Missing required param(s) check
        # Throw exception iff ignoreRequiredParams==False
        if ignoreRequiredParams is False:
            missing_list = []
            {{#missing_body_params}}
            if {{.}} is None:
                missing_list.append('{{.}}')
            {{/missing_body_params}}

            if len(missing_list) > 0:
                raise TypeError("Required param(s): < {} > not found".format(', '.join(missing_list)))

        {{/missing_body}}
        {{#req_body}}
        data = {
            {{#req_body_params_map}}
            '{{name}}': {{#isReserved}}_{{/isReserved}}{{name}},
            {{/req_body_params_map}}
        }
        {{/req_body}}
        {{^req_body}}
        data = {}
        {{/req_body}}

        {{#opt_body}}
        # Only send optional parameters if they have a value
        {{#opt_body_params_map}}
        if {{#isReserved}}_{{/isReserved}}{{name}} is not None:
            data["{{name}}"] = {{#isReserved}}_{{/isReserved}}{{name}}
        {{/opt_body_params_map}}

        {{/opt_body}}
        if kwargs:
            for key, value in kwargs.iteritems():
                data[key] = value

        return self._museRestClient.hitRestEndpoint(cmd_url, "{{rest_method}}", {{#pass_apiKey}}apiKey=apiKey, {{/pass_apiKey}}{{#pass_oauthToken}}oauthToken=oauthToken, {{/pass_oauthToken}}
                                                    reqJson=data, check=check, send=send,
                                                    reqHeaders=reqHeaders, isSecure=isSecure)
    {{/commands}}
    {{^commands}}

    pass  # This namespace is defined but has no commands
    {{/commands}}
{{/clients}}
