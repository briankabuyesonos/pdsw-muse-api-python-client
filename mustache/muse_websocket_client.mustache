from base_muse_websocket import BaseMuseWebsocket


# This class was automatically generated and should only be edited via muse-client.py.template
class MuseWebsocketClient(BaseMuseWebsocket):

    def __init__(self, ip, secure=True, hhid=None, uuid=None, apiKey=None,
                 subprotocols=None):
        super(MuseWebsocketClient, self).__init__(ip=ip, secure=secure, hhid=hhid, uuid=uuid, apiKey=apiKey,
                                                  subprotocols=subprotocols)

        {{#namespaces}}
        self.{{var_name}} = {{namespace_name}}Client(self)
        {{/namespaces}}
{{#clients}}


# This class was automatically generated and should only be edited via namespace-client.py.template
class {{namespace_name}}Client(object):
    {{#namespace_description}}
    """
    {{{.}}}{{! Triple braces == do not escape special chars (like ") }}
    """
    {{/namespace_description}}

    def __init__(self, museWebsocketClient):
        self._museConnection = museWebsocketClient
    {{#commands}}

    # This method was automatically generated and should only be edited via namespace-command.py.template
    def {{command_name}}(self, {{#required_args_map}}{{#isReserved}}_{{/isReserved}}{{name}}=None, {{/required_args_map}}{{#optional_args_map}}{{#isReserved}}_{{/isReserved}}{{name}}=None, {{/optional_args_map}}sendCommand=True, cmdId=True, ignoreRequiredParams=False, **kwargs):
        """
        {{#command_description}}
        {{{.}}}

        {{/command_description}}
        This method was autogenerated from the {{namespace_name}} namespace xml definition
        {{#arg_comments}}
        :param {{arg_name}}: ({{arg_type}}){{{arg_description}}}
        {{/arg_comments}}
        :param ignoreRequiredParams: (Optional) If True, skip raising exception when required parameters are missing
                                     and remove sending of None body parameters
        :param sendCommand: (Optional) Whether to send the prepared websocket command or return the command dict
        :param cmdId: (Optional) Whether to inject a commandId header param
        :return:{{#return_type}} {{.}}{{/return_type}}
        """

        header = {
            "namespace": "{{namespace_name}}",
            "command": "{{command_name}}",
            {{#headers}}
            "{{header_key}}": {{header_value}}
            {{/headers}}
            {{^headers}}

            {{/headers}}
        }

        {{#set_hhConfigToken}}
        oauthToken = self._museConnection.hhConfigToken if oauthToken is None else oauthToken
        {{/set_hhConfigToken}}
        {{#set_hhConfigAdminToken}}
        oauthToken = self._museConnection.hhConfigAdminToken if oauthToken is None else oauthToken
        {{/set_hhConfigAdminToken}}
        {{#set_hhFakeToken}}
        oauthToken = self._museConnection.hhConfigToken if oauthToken is None else oauthToken
        {{/set_hhFakeToken}}
        {{#oauth_token}}
        # Verified required oauthToken param is not None
        assert oauthToken is not None, "Command requires an oauthToken param"
        header["authorization"] = "bearer {}".format(oauthToken)
        {{/oauth_token}}
        # Add cmdId to the header
        if cmdId:
            header["cmdId"] = str(self._museConnection.cmdId)

        {{#missing_body}}
        # Missing required param(s) check
        # Throw exception iff ignoreRequiredParams==False
        if ignoreRequiredParams is False:
            missing_list = []
            {{#missing_body_params}}
            if {{.}} is None:
                missing_list.append('{{.}}')
            {{/missing_body_params}}

            if len(missing_list) > 0:
                raise TypeError("Required param(s): < {} > not found".format(', '.join(missing_list)))

        {{/missing_body}}
        {{#req_body}}
        body = {
            {{#req_body_params_map}}
            '{{name}}': {{#isReserved}}_{{/isReserved}}{{name}},
            {{/req_body_params_map}}
        }
        {{/req_body}}
        {{^req_body}}
        body = {}
        {{/req_body}}

        {{#opt_body}}
        # Only send optional parameters if they have a value
        {{#opt_body_params_map}}
        if {{#isReserved}}_{{/isReserved}}{{name}} is not None:
            body["{{name}}"] = {{#isReserved}}_{{/isReserved}}{{name}}
        {{/opt_body_params_map}}

        {{/opt_body}}
        if kwargs:
            for key, value in kwargs.iteritems():
                body[key] = value

        if sendCommand:
            self._museConnection.send([header, body])
        else:
            return [header, body]
    {{/commands}}
{{/clients}}
