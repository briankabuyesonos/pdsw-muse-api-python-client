"""
This module houses a helper class, which performs helper operations
related to the settings namespace.
"""
from base_helper import baseNamespaceHelper

# due to incomplete command definitions in the muse settings namespace
# xml, we have manually defined some settings routes here instead of using the
# autogenerated muse_rest client
IR_CONTROL_URL = "/ircontrol"
EDID_STATUS_URL = "/hdmi/edid/"
HDMI_STATUS_URL = "/hdmi/status/"
HDMI_HPD_TOGGLE_URL = "/hdmi/powercycle"
HH_SETTIMGS_STUB = "/households/{}/settings/"
AUTO_UPDATE_URL = "restricted/autoUpdatesEnabled"


class settingsNamespaceHelpers(baseNamespaceHelper):
    """
    Class to manage helper methods for the muse settings namespace
    """
    def __init__(self, restClient):
        """
        Initializer

        :param restClient: instance of the MuseRestClient class
        """
        super(settingsNamespaceHelpers, self).__init__(
            restClient=restClient)
        self._ir_url = IR_CONTROL_URL
        self._edid_url = EDID_STATUS_URL
        self._hdmi_status_url = HDMI_STATUS_URL
        self._hdmi_hpd_toggle_url = HDMI_HPD_TOGGLE_URL
        self._auto_update_url = HH_SETTIMGS_STUB.format(self._baseMuseClient.hhid) + AUTO_UPDATE_URL

    def _generic_post(self, url, json_body):
        """
        Generic method to make a POST request with the given json
        body as the request body

        :param str url: the full URL to make the request to
        :param dict json_body: the request parameters
        :return: dictionary response
        """
        token = self._baseMuseClient.hhConfigAdminToken
        self._baseMuseClient.hitRestEndpoint(
            cmd_url=url, oauthToken=token, reqMethod="POST",
            reqHeaders={"Content-Type": "application/json"},
            reqJson=json_body)

    def _generic_get(self, url):
        """
        Generic method to make a GET request

        :param str url: the full URL to make the request to
        :return: dictionary response
        """
        token = self._baseMuseClient.hhConfigAdminToken
        return self._baseMuseClient.hitRestEndpoint(
            cmd_url=url, oauthToken=token, reqMethod="GET",
            reqHeaders={"Content-Type": "application/json"})

    def get_hdmi_edid_status(self):
        """
        Request the HDMI EDID status

        :return: dictionary response
        """
        return self._generic_get(self._edid_url)

    def get_hdmi_status(self):
        """
        Request the HDMI status

        :return: dictionary response
        """
        return self._generic_get(self._hdmi_status_url)

    def toggle_hdmi_hpd(self):
        """
        Call the endpoint that toggles HPD from the ZP's 5v OUT on HDMI
        capable ZPs.

        :return: Boolean whether the GET return status is good.
        """
        token = self._baseMuseClient.hhConfigAdminToken
        resp = self._baseMuseClient.hitRestEndpoint(
            cmd_url=self._hdmi_hpd_toggle_url,
            oauthToken=token, reqMethod="GET",
            check=False)
        return resp.status_code == 200

    def get_ir_control_state(self):
        """
        Getter for the IR remote control enabled state

        :return: dictionary response
        """
        return self._generic_get(self._ir_url)

    def is_ir_control_enabled(self):
        """
        Return True if the IR remote control state is enabled

        :return: boolean - True if IR control is enabled
        """
        return self.get_ir_control_state()['enabled']

    def set_ir_control_state(self, enabled):
        """
        Setter for the IR remote control enabled state

        :param bool enabled: whether or not to enable IR control
        """
        self._generic_post(self._ir_url, {"enabled": enabled})

    def set_auto_update_state(self, enabled):
        """
        Setter for the automatic update state of the household

        :param bool enabled: whether or not to enable Automatic
            updates
        """
        token = self._baseMuseClient.hhConfigToken
        return self._baseMuseClient.hitRestEndpoint(
            cmd_url=self._auto_update_url,
            oauthToken=token,
            reqMethod="POST",
            apiKey=self._baseMuseClient.api_key,
            reqData="true" if enabled else "false",
            check=False)

    def get_auto_update_state(self):
        """
        Getter for the automatic update state of the household

        :return: boolean - whether or not auto updates are enabled
        """
        token = self._baseMuseClient.hhConfigToken
        resp = self._baseMuseClient.hitRestEndpoint(
            cmd_url=self._auto_update_url,
            oauthToken=token,
            reqMethod="GET",
            apiKey=self._baseMuseClient.api_key,
            check=False)
        assert resp.status_code == 200
        return resp.text == 'true'

