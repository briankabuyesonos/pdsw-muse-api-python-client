import inspect
import json
import pprint
import sys


class MuseParsingError(Exception):
    pass


class MuseEvent(object):
    def __init__(self, header, body):
        """
        Generic muse-style event
        :param header: Json dictionary of a valid muse header
        :param body: Json dictionary of a valid muse header
        """
        self.header = header
        self.body = body

        # All muse commands should have type and namespace elements
        self.type = self.header["type"]
        self.namespace = self.header["namespace"]

    def __str__(self):
        return pprint.pformat([self.header, self.body])

    @staticmethod
    def parseRaw(wsMessage):
        """
        Parse raw incoming websocket messages
        :param wsMessage:
        :return:
        """
        messageJson = json.loads(wsMessage)
        if len(messageJson) != 2:
            raise MuseParsingError("Malformed websocket message, expected header-body format, got <{}>"
                                   .format(wsMessage))

        return MuseEvent(messageJson[0], messageJson[1])

    @staticmethod
    def classifyEvent(genericMuseEvent):
        """
        Factory method that parses the given muse-style message into a known event type, if possible
        :param genericMuseEvent: classified generic muse event
        :return: Classified muse event object, deriving from MuseEvent
        """
        # set the classified event to the generic type to begin with
        museEvent = MuseEvent(genericMuseEvent.header,
                              genericMuseEvent.body)
        try:
            if "success" in genericMuseEvent.header:
                if genericMuseEvent.header["success"] and len(genericMuseEvent.body) == 0:
                    # Do a generic success match if the event is a success and it has no body stuff
                    # probably a response to a sub/unsub command
                    museEvent = MuseSuccessEvent(genericMuseEvent.header,
                                                 genericMuseEvent.body)
                elif not genericMuseEvent.header["success"]:
                    # If its not successful, its probably an error event
                    museEvent = MuseErrorEvent(genericMuseEvent.header,
                                               genericMuseEvent.body)
            if "success" not in genericMuseEvent.header or len(genericMuseEvent.body) > 0:
                # If the event doesn't have "success" param or if it has body stuff, try to do event type matching
                # Look through all of the defined event types and try to find a match
                event_class = genericMuseEvent.header["type"] + "Event"
                # Capitalize the event_class
                event_class = event_class[:1].upper() + event_class[1:]
                if event_class in ALL_MUSE_EVENTS:
                    # If match is found, create an instance of that class
                    matched_class = getattr(sys.modules[__name__], event_class)
                    museEvent = matched_class(genericMuseEvent.header,
                                              genericMuseEvent.body)
            return museEvent
        except Exception as ex:
            raise MuseParsingError("Error parsing muse event: {}\n\t{}".format(str(ex), genericMuseEvent))


class MuseErrorEvent(MuseEvent):
    def __init__(self, header, body):
        super(MuseErrorEvent, self).__init__(header, body)


class MuseSuccessEvent(MuseEvent):
    def __init__(self, header, body):
        super(MuseSuccessEvent, self).__init__(header, body)


{{#muse_events}}
class {{event_type}}Event(MuseEvent):
    def __init__(self, header, body):
        super({{event_type}}Event, self).__init__(header, body)
        {{#event_body}}

        {{#parameters}}
        self.{{.}} = self.body.get("{{.}}")
        {{/parameters}}
        {{/event_body}}


{{/muse_events}}
ALL_MUSE_EVENTS = [name for name, obj in inspect.getmembers(sys.modules[__name__], inspect.isclass)]
